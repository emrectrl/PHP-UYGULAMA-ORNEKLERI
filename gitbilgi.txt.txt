
Git nedir 
Bir versiyon kontrol sistemidir  git ve git hub farkli konular konsepti farkli
Git bir versiyon kontrol sistemidir pc oyunlarindaki checkpoint kontrol noktalari olusturur ve yazlim yada harhangibir urunu gelistirirken checkpoind noktasi olusturmak icin kullanilir.

Nasil ortaya cikti?
Linux kurucusu linus torvalds tarafindan ihtiyaca donuk acik kaynak olarak kuruldu ve endusturu standardi haline geldi baska versyon sistemleri de mevcut

Github nedir?
Github bir portal repolarimizi  sakladigimiz birbirimizle payasabildigimiz bir portal 
Temel Git terimleri ve komutları



Repository Proje dosyalarını uzak bir sunucuda depolar. Genel kullanımda “Repo” olarak da kısaltılır.
Branch Projenin bir çok bölümünü derli toplu şekilde tutulmasını sağlar. Branchin avantajı ana branchteki(master) geliştirme yapısını etkilemeden projeyi diğer oluşturduğumuz branchler üzerinden yönetebiliriz.
Master Reponun ana branchidir. Git üzerinde hiç bir işlem yapmazsak değişikler master branchi üzerinden devam eder.
Commit Proje dosyalarınızda belli bir değişiklik yaptığınızda o değişikliğin anlık görüntüsünün alınıp kaydedilmesine denir.
Checkout Mevcut branch üzerindeki commit’lerin üzerinde geçiş yapabilmemizi sağlar.
Fork Repository’nin bir kopyasının alınmasıdır. Temel anlamda forkun kullanım amacı alınan bu kopya üzerinde değişiklikler yaptıktan sonra projenin ana reposuna gönderilerek projenin gelişmesine katkı sağlamaktır.
Pull Request (PR): Fork edilen proje üzerinde değişiklikler yaptıktan sonra gerçek repository’e gönderilerek o projenin sahibi olan geliştiricinin değerlendirmesine sunmaktır. Eğer PR kabul edilirse ana repository üzerinde, fork ettiğiniz proje üzerinde değişiklikler işlenir.
Merge Branch üzerinde yaptığımız değişiklikleri master branch’i üzerinde birleştirme işlemidir.

Şimdi ise komutlara göz atalım.

Kullanici adi ve email tanimlama:
Yeni bir kullanici olarak bir projeye dahil oldugumuzda yada birni projeye
dahil etmek istedigimizde sisteme kulanici adi ve e-mail tanimlamamiz gerekir bunun icin
git config --global user.name "emre cal"   kullanici adi ekleme
git config --global user.name  sadece bunu yazarsak mevcut kullanici adini goruntuler
git config --global user.email"emrecaltr@hotmail.com" kullanici mail ekleme
git config --global user.email   kullanici mailini goruntuleme

git (yardim dokumantasyonu)
sadece git yazarsak mevcut tum kodlari getirir
git  --version ise hangi git versionunun oldugunu 
gosterir

rm -rf ( klasor siler)
rm ile dosyalari sileriz ancak klasorleri silemeyiz bunun icin rm -rf kodunu kullaniriz
or.   rm - rf gitkursu


rm  (remove - kaldir)
belirtilen dosyayi siler or. rm ornek.txt

Touch (dosya olustur)
Bulundugumuz klasore herhangibir dosya olusturur or. 
touch  ornek.txt 

Mkdir   (make drectory - klasor olustur)
Klasor olusturur or.  Mkdir gitkursu yazarsak gitkursu adinda 
bir klasor olustururrz

Clear (ekrani temizleme)
Ekrani temizler karmasikligi giderir


Cd   (change drector - klasor degistir)
 gitmek istedigimiz klasore goturur  or cd Documents cd ..      Bir onceki klasore gel
Klasor ismini yazdiktan sonra tab  a basarsan otomatik tamamlar


Ls  list 
İcerisinde bulundugumuz dosya ve klasorleri listele

Pwd  (print working directory)
Hangi klasorde oldugumuzu gosterir

git config
Kullanıcı adı, mail gibi ayarların belirleneceği komuttur. Örnek
git config --global user.email sam@google.com

git init
Bu komut ile proje dizininizde GIT dizinini oluşturur. Bu dizinde projenizin repo adresi, projenin akışı, bilgileri gibi veriler bulunur.

git add
Verilen paremetrelere göre o dosyaları dizine ekler ve commit’lemeye hazır hale gelirler. “Git add .” komutu mevcut dizindeki tüm dosyaları dizine ekler. “Git add dosya.txt” komutu mevcut dizindeki “dosya.txt” dosyasını dizine ekler.
git add dosya.txtgit add .

git rm
git add komutunun tersi olarak belirtiğiniz dosya veya dosyaları çalışma dizininden siler.
git rm dosya.txt

git commit
git commit -m “ilk commit” komutu çalıştırdığımızda “ilk commit” başlığıyla o anki çalışma dizinindeki dosyaları .git içindeki özel bir bölüme(head) ekler.
git commit –m “ilk commit”

git status
Proje dosyalarının o anki durumu hakkında bilgi verir. Durumu değiştirilmiş dosyaları gösterir.

git remote
“git remote -v” komutu ile projeye bağlanan uzak sunucuları listeler. Mevcut projeyi uzak sunucuya eklemek için ise “git remote add” komutunu çalıştırabiliriz.
git remote add origin 
Yukarıdaki komuttaki Github üzerinde belirttiğimiz repository’nin projeye eklemesini sağlarız.

git push
Commit’lediğimiz dosyaları uzak sunucudaki repository’e gönderir.
git push origin master

git pull
Uzak sunucudaki proje dosyaları üzerindeki bir değişiklik veya ekleme varsa onları bizim localimizdeki proje dosyaları ile birleştirir.

 git commit -a
 bir doyayi commit ettik ve uzerinde bir sure sonra degisiklik yaptigimizda
git status ile kontrol edersek modifieted ifadesini goruruz degistirilmis
anlamini tasir o ana kadar ki duzenlmeleri git e yuklemis olmasina 
ragmen son degisikligi guncellemedigi anlamina gelir tekrar git add yaparak da
guncelleyebiliriz ancal bunun yerine git commit -a yaparsak herseyi direk ekler
ve icerisine alip commit yapar
yada git add .  yaparsak ne var ne yok ekler

git commit -m
yapilan degisiklere aciklama eklemek yani aciklama commiti eklemek icin kullanilir
or. git commit -m "degisiklikler yapildi"


git add .
yapilan tum degisiklikleri ve herseyi yukler

gitignore (gormezden gelmek)
Toplu bir git add yapmak istedigimizi varsayalim bu durumda tum dosyalar sisteme
yuklenecektir icerisinde yuklenmesini istemedigimiz dosyalar varsa 
bunun icin calisma klasoru icerisinde .gitignore adinda dosya olusturmamiz gerek 
ve bu dosyanin icine gizli kalmasini istedigimiz dosyalari belirtiyoruzq

git commit

yapilan degisiklikleri kaydetmek icin git commit yazarsak default ide acilir ve bizden bir
aciklama satiri girmemizi ister cunku git de aciklama satiri comit yaparken mecburi



head-master 
bir grup yazilimci ile calisirken  her bir yazilimci kendine ozgu branch acarak 
ilgili bolumu gelistirir ve bu gelistirmeler gunun sonunda ana branch a yani
master a aktarilir basindaki head son commitimizin pozisyonunu gosterir 


git branch

 ornegin git branch feat   gibi bir branch acarsak bizim icin yeni bir
branch olusturur  ve head-feat  a gececektir sadece git branch yazmamiz durumunda
mevcut branchleri gosterecektir

git merge

farkli branch lere ayrilmis projemizi birlestirmek icin kullanilir or .  git merge feat

git switch
mevcut branchler arasinda gecis yapmak icin kullanilir 
or.  git switch reso




fast forwarding
diyelimki  calisilan projede belirli bir ilerlemeyi main branch i riske atmamak icin 
yeni bir branch olusturup orada degisiklikler yapildi ve bu durumda herhangibir cakisma
olmazsasa aslinda main branch de de yapilirmis gerek yokmus yeni bir branch a dedigimiz
noktada yapilan isleme fast forwarding denir


merge conflict
buyuk bir ekiple calisirken ekip uyeleri farkli branch larde 
cakismaya sebep olabilecek silme ve guncelleme islemleri 
yapmis olabilir bu durmda sadece birini birakarak yada conflict leri 
cozerek merge edilebilir aksi taktirde hata verir


git restore
belirli durumlarda yapilan degisiklikleri geri almamiz gerekebilir
boyle durumlarda or.   git restore ornek.txt  dersek
son yapilan commite  donmus olur

git stash
bilgileri al sakla biryerde ben istersem ulasayim 
git kendi icerisinde ozel biryerde saklar ve commit etmedigimiz
halde yaptigimiz degisiklikleri  kayit altina almamizi ve sonra
tekrar ulasabilmemizi saglar argo tabirle zulalar  or.  git stash
yazarsak bir id numarasi ile saklar 
geri getirmek icin  git stash pop  kullaniriz  git stash list dersek sakladiklarimizin listesini verir
git stash apply     stash@{0}    gibi id numarasini belirtirsek istedigimiz yere istedigimiz stash i ekler

git stash clear  butun stash listesini temizler 

 sadece git stahs apply yaparsak mevcut stash i ekler ancak hafizadan kaldirmaz baska bir yerde  kullanmak uzere saklamaya devam eder


checkout
commit atmadan once git restore ile en con commite doner peki comit attiktan sonra?
belirli commit lerden sonra  geri donmek icin once git log yazariz ve sonrasinda gitmek 
istedigimiz log un hash ini  or.   git checkout ba............23    seklinde sonuna id numarasini
yazarak geriye gidebiliriz  head bir onceki commite gelse bile master eskide kaldigi icin 

reset vs revert

git reset  b133......dewdede     sonuna id  numarasini yazarak sonrasindaki branchleri siler

git revert 8b....33433443  sonuna id numarasini yazarsak  istedigimiz commit e gider ancak 
yeni bir commit olusturarak devam eder ancal silinmez log tutmaya devam eder



git diff

commitler branclar arasinda yapilan degisiklikler sonucunda ne farklar olugunu
gormek icin kullanilir yapilan eylemlerin sonucunda olusan farkliliklari getirr

or.   git diff yazdiktan sonra head yazip son commitimiz uzerindeki degisiklikleri gorebiliriz

yada  iki commitin idisini yazarak iki commit arasindaki farkliliklari gorururz sorun cikarirsa
arasina iki nokta koy


rebase  (bazi degistirme)
belili bir zaman icerisinde farkli peryotlarla yapilmis farkli branchlerdeki degisikleri 
belirli bir hizaya sokmak istedigimizde kullanilir ancak zaman akisini degistirecegi icin 
risklidir asla kullanmamamiz gereken konu belirli bir yere kadar proje gelmis ve projede calisan
baska kisiler de  projeye katkida bulunduysa budurumda rebase yapilirsa herezin calismasini
dagitabilir kimseyle paylasilmamis ise son haline getirmek icin rebase kullanilabilir
or. git rebase master



GITHUB PAYLASIMI
calistiriyoruz
git remote add origin git@github.com:emrectrl/PHP-UYGULAMA-ORNEKLERI.git   
git branch -m main
git push -u origin main       icerisinde bulundugumuz guncel commitleri origine yollar

git  clone 
git  clone git@github.com:emrectrl/PHP-UYGULAMA-ORNEKLERI.git  
git hub daki dosyalari bilgisayara indirir



















































































































































































































